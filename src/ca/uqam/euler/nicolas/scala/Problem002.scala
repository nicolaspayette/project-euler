package ca.uqam.euler.nicolas.scala

/**
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 *   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * Find the sum of all the even-valued terms in the sequence which do not exceed four million.
 *
 */
object Problem2 {
  def fib = {
    def fib(x: Int, y: Int): Stream[Int] = {
      val n = x + y
      Stream.cons(n, fib(y, n))
    }
    fib(0, 1)
  }
  def fibonaSum(upperBound: Int) = {
    val evenFib = fib.filter(_ % 2 == 0)
    evenFib.takeWhile(_ <= upperBound).sum
  }
  def main(args: Array[String]) {
    println(fibonaSum(4000000))
  }
}